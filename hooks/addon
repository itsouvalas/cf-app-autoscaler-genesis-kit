#!/bin/bash
set -u
#Version check
min_version="2.7.8-rc1"
genesis_version="$(genesis -v 2>&1 | grep '^Genesis v' | sed -e 's/Genesis v\(.*\) (.*$/\1/')"
if ! [[ "$genesis_version" =~ -dev$ ]] && ! new_enough "$genesis_version" "$min_version" ; then
  describe >&2 "" "#R{[ERROR]} This kit needs Genesis $min_version.  Please upgrade before continuing" ""
  exit 1
fi
set -e

list() {
  describe "" "$(cat <<EOF
The following addons are defined:

  #G{bind-autoscaler}   Binds the Autoscaler service broker to your deployed CF.

  #G{setup-cf-plugin}   Adds the 'autoscaler' plugin to the cf cli. Use #y{-f} option
                    to bypass confirmation prompt.

  #G{config-autoscaler} Configures autoscaling for a Cloudfoundry app of your choosing.
EOF
)" ""
}

cf_login() {
  cf_deployment_env="$(exodus cf_deployment_env)"
  cf_deployment_type="$(exodus cf_deployment_type)"
  cf_exodus="${GENESIS_EXODUS_MOUNT}${cf_deployment_env}/${cf_deployment_type}"
  if ! cf plugins | grep -q '^cf-targets'; then
    describe "#Y{The cf-targets plugin does not seem to be installed}"
        echo "Install it first, via 'genesis do $GENESIS_ENVIRONMENT -- setup-cli'"
        echo "from your $cf_deployment_env environment in your CF deployment repo."
    exit 1
  fi

  system_domain="$(safe get "${cf_exodus}:system_domain")"
  api_url=https://api.$system_domain
  username="$(safe get "${cf_exodus}:admin_username")"
  password="$(safe get "${cf_exodus}:admin_password")"

  #TODO enfoce ssl validation
  cf api "$api_url" --skip-ssl-validation
  cf auth "$username" "$password"
  cf save-target -f "$cf_deployment_env"
  echo ; echo
  cf target
}

add_plugin() {
  cf_login
  describe "" "" "#Wkiu{Attempting to install latest version of the CF-Community/app-autoscaler-plugin...}"
  existing="$(cf plugins --checksum | grep AutoScaler | tr -s ' ' | cut -d ' ' -f 2)"
  cf install-plugin -r CF-Community app-autoscaler-plugin "$@"
  updated="$( cf plugins --checksum | grep AutoScaler | tr -s ' ' | cut -d ' ' -f 2)"
  if [[ -z "$updated" ]] ; then
    echo
    exit 0
  fi
  if [[ "$existing" == "$updated" ]] ; then
    describe "No update - existing app-autoscaler-plugin remains at version $existing" ""
    exit 0
  fi
  [[ -n "$existing" ]] && action="updated" || action="installed"
  header="$(cf plugins | head -n3 | tail -n1)"
  echo ""
  echo "$header"
  echo "$header" | sed -e 's/[^ ] [^ ]/xxx/g' | sed -e 's/[^ ]/-/g'
  cf plugins | grep AutoScaler
  describe "" \
    "#G{[OK]} Successfully $action CF-Community app-autoscaler-plugin." \
        "     You can run #c{cf uninstall-plugin AutoScaler} to remove it when no" \
        "     longer desired."
  exit 0
}

bind_autoscaler() {
  cf_login
  username="$(exodus service_broker_username)"
  password="$(exodus service_broker_password)"
  domain=$(exodus service_broker_domain)
  url="https://$domain"
  cf create-service-broker autoscaler "$username" "$password" "$url"
  cf enable-service-access autoscaler
  describe "" "#G{[OK]} Successfully created the service broker."
  exit 0
}

config_autoscaler() {
  bold=$(tput bold)
  normal=$(tput sgr0)
  cf_login
  username="$(exodus service_broker_username)"
  password="$(exodus service_broker_password)"

  printf "%90s" " " | tr ' ' '='
  echo -e "\nThese are the organizations defined on your Cloudfoundry deployment"
  cf orgs
  prompt_for org_name line  \
    'Type the organization name your application resides on'
  
  cf target -o $org_name
  printf "%90s" " " | tr ' ' '='
  echo -e "\nThese are the spaces defined for your ${bold}$org_name${normal} orgnization in your Cloudfoundry deployment"
  cf spaces

  prompt_for space_name line  \
    'Type the space name your application resides on'

  cf target -o $org_name -s $space_name
  
  printf "%90s" " " | tr ' ' '='
  echo -e "\nThese are the applications running on your Cloudfoundry deployment"
  cf apps
  prompt_for app_name line  \
    'Type the application name you would like to configure autoscaling for'
    
  prompt_for app_min line --default "2" \
    'Type the minimum number of instances running at all times'

  prompt_for app_max line --default "5" \
    'Type the maximum number of instances running at all times'
  
  prompt_for app_metric_type line --default "cpu" \
    'Type the metric type used for autoscaling'
  
  prompt_for app_metric_up line --default "10" \
    'Type the threshold value at which your instances will scale up'

  prompt_for app_metric_down line --default "1" \
    'Type the threshold value at which your instances will scale down'

  mkdir -p $GENESIS_ROOT/policies

  function create_policy_json 
  (
      cat <<EOF > $GENESIS_ROOT/policies/$org_name-$space_name-$app_name-as-policy.json
{
    "instance_min_count": $app_min,
    "instance_max_count": $app_max,
    "scaling_rules": [
        {
            "metric_type": "$app_metric_type",
            "breach_duration_secs": 60,
            "threshold": $app_metric_down,
            "operator": "<=",
            "cool_down_secs": 60,
            "adjustment": "-1"
        },
        {
            "metric_type": "cpu",
            "breach_duration_secs": 60,
            "threshold": $app_metric_up,
            "operator": ">",
            "cool_down_secs": 60,
            "adjustment": "+1"
        }
    ]
}
EOF
  )

  if [ -f "$GENESIS_ROOT/policies/$org_name-$space_name-$app_name-as-policy.json" ]; then
  prompt_for policy_overwrite line  \
    "The policy file aleady exists. Type ${bold}yes${normal} to overwrite it"
    if [ "$policy_overwrite"="yes" ]; then
      create_policy_json
      else
      exit 0
      fi
    else
    create_policy_json
  fi

first_as_service_name=$(cf services | grep autoscaler | awk '{print $1}')

printf "%90s" " " | tr ' ' '='
echo -e "\nThese are the services currently running on your CloudFoundry Deployment"
cf services
  prompt_for as_service_name line --default "$first_as_service_name" \
    'Type the autoscaler service name you would like to use'
  if cf autoscaling-policy $app_name | grep "The application is not bound to Auto-Scaling service" > /dev/null 2>&1; then
    cf bind-service $app_name $as_service_name -c $GENESIS_ROOT/policies/$org_name-$space_name-$app_name-as-policy.json
    else
      prompt_for policy_reapply line  \
    "The application is already bound to an Auto-Scaling service. Type ${bold}yes${normal} to re-apply it"
      if [ "$policy_reapply"="yes" ]; then
        cf aasp $app_name $GENESIS_ROOT/policies/$org_name-$space_name-$app_name-as-policy.json
        else
        exit 0
      fi
  fi
  exit 0
}


case $GENESIS_ADDON_SCRIPT in
list)
  list
  ;;

setup-cf-plugin)
  add_plugin "$@"
  ;;

bind|bind-autoscaler)
  bind_autoscaler
  ;;

config|config-autoscaler)
  config_autoscaler
  ;;

*)
  describe >&2 "" "#R{[ERROR]} No such addon: $GENESIS_ADDON_SCRIPT"
  list
  exit 1
  ;;
esac
exit 0
